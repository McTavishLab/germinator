# python prepare_index.py <directorypath>

# Get write dates for all files in a directory D, and put them
# in a JSON file as D/.write_dates.json

import sys, os, datetime, json

def main(dirname):

    if '.git' in dirname:
        sys.exit(0)

    json_path = os.path.join(dirname, '.write_dates.json')

    if not os.path.exists(json_path):
        print >>sys.stderr, 'Metadata file %s not found' % json_path
        sys.exit(1)

    index_path = os.path.join(dirname, 'index.html')

    if os.path.exists(index_path) and not autogenerated(index_path):
        print >>sys.stderr, 'Index file %s already exists' % index_path
        sys.exit(1)

    with open(json_path, 'r') as infile:
        dates = json.load(infile)

    longest = 0

    for f in dates:
        longest = max(longest, len(f))

    # Look for excess files (relative to metadata blob)
    for g in os.listdir(dirname):
        if keep(g) and not g in dates:
            print >>sys.stderr, \
                'Warning: File %s not present in .write_dates.json' % os.path.join(dirname, g)

    with open(index_path, 'w') as outfile:
        print 'Writing %s' % index_path
        outfile.write('<!-- AUTOGENERATED by prepare_index.py -->\n')
        outfile.write('<pre>\n')
        components = dirname.split('/')
        dots = ['..' for component in components[1:]]
        for component in components:
            if len(dots) > 0:
                outfile.write('<a href="{}">{}</a> > '.format('/'.join(dots), component))
                dots = dots[1:]
            else:
                outfile.write(component)
        outfile.write('\n\n')
        for f in sorted(dates.keys()):
            if not keep(f): continue
            f_path = os.path.join(dirname, f)
            # Check for missing files (relative to metadata blob)
            if not os.path.exists(f_path):
                print >>sys.stderr, 'Warning: File %s does not exist any more' % f_path
            blob = dates[f]
            if blob['directory']:
                size = ''
                f = f + '/'
            else:
                size = '{:>11,}'.format(blob['size'])
            outfile.write('<a href="{}">{}</a>{} {} {}\n' \
                          .format(f, f, (' ' * (longest-len(f))), blob['date'], size))
        outfile.write('</pre>\n')

        if not maybe_append(os.path.join(dirname, 'README.html'), outfile):
            maybe_append(os.path.join(dirname, 'README'), outfile)

def keep(name):
    if name.startswith('.') and name != '..': return False
    if name.endswith('~'): return False
    if name == 'index.html': return False
    if name == 'README.md': return False
    return True

def maybe_append(path, outfile):
    if os.path.exists(path):
        pre = not path.endswith('.html')
        if pre: outfile.write('<pre>\n')
        with open(path, 'r') as infile:
            for line in infile:
                outfile.write(line)
        if pre: outfile.write('</pre>\n')
        return True
    else:
        return False

def autogenerated(path):
    with open(path, 'r') as infile:
        return 'AUTOGENERATED' in infile.readline()

main(sys.argv[1])
